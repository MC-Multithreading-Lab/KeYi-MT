From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: wangxyper <wangxyper@163.com>
Date: Sun, 9 Apr 2023 09:02:23 +0800
Subject: [PATCH] Some bug fixes from Moka


diff --git a/src/main/java/cc/keyimc/keyi/server/ServerEntityTickHook.java b/src/main/java/cc/keyimc/keyi/server/ServerEntityTickHook.java
index a7b92919eb6402389ec51410565592a7be360bd3..10ed557f5c804b409f92d4e3611276d539247ea6 100644
--- a/src/main/java/cc/keyimc/keyi/server/ServerEntityTickHook.java
+++ b/src/main/java/cc/keyimc/keyi/server/ServerEntityTickHook.java
@@ -4,6 +4,7 @@ import cc.keyimc.keyi.concurrent.WorkerThreadFactory;
 import cc.keyimc.keyi.concurrent.WorkerThreadPoolExecutor;
 import cc.keyimc.keyi.concurrent.threadfactory.DefaultWorkerFactory;
 import cc.keyimc.keyi.config.KGlobalConfig;
+import cc.keyimc.keyi.utils.TargetEntitySlicesNotFoundException;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.Entity;
@@ -69,7 +70,9 @@ public class ServerEntityTickHook {
                     }
                     try {
                         level.tickNonPassenger(entity);
-                    } catch (Throwable throwable) {
+                    }catch (TargetEntitySlicesNotFoundException e){
+                        //Do nothing here
+                    }catch (Throwable throwable) {
                         if (throwable instanceof ThreadDeath) throw throwable;
                         level.getCraftServer().getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerInternalException(throwable.getMessage(), throwable)));
                         throwable.printStackTrace();
diff --git a/src/main/java/cc/keyimc/keyi/utils/TargetEntitySlicesNotFoundException.java b/src/main/java/cc/keyimc/keyi/utils/TargetEntitySlicesNotFoundException.java
new file mode 100644
index 0000000000000000000000000000000000000000..1087ab263d2a56730d58afaa4fff266c8227ae81
--- /dev/null
+++ b/src/main/java/cc/keyimc/keyi/utils/TargetEntitySlicesNotFoundException.java
@@ -0,0 +1,4 @@
+package cc.keyimc.keyi.utils;
+
+public class TargetEntitySlicesNotFoundException extends RuntimeException{
+}
diff --git a/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java b/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
index d9cee42da1b097590e627142d3c5dccbc180b5ae..d2ce40716c992f14d738ffb7fa957e5811f43451 100644
--- a/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
+++ b/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
@@ -556,11 +556,16 @@ public final class PlayerChunkLoader {
             if (queuedSend == null) {
                 concurrentChunkSends.getAndDecrement(); // we never sent, so decrease
                 // stop iterating over players who have nothing to send
+                if (this.chunkSendQueue.isEmpty()) {
+                    // nothing left
+                    break;
+                }
                 continue;
             }
 
             if (!this.isChunkPlayerLoaded(queuedSend.chunkX, queuedSend.chunkZ)) {
-                throw new IllegalStateException();
+                this.chunkSendQueue.add(data);
+                continue;
             }
 
             data.nextChunkSendTarget = nextPlayerDeadline;
diff --git a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
index 387d07868301877dd7fca5d8dfd21e1331f4793e..0279246e701be59281fbeba8daf936a48ee8d05a 100644
--- a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
+++ b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
@@ -1,5 +1,6 @@
 package io.papermc.paper.chunk.system.entity;
 
+import cc.keyimc.keyi.utils.TargetEntitySlicesNotFoundException;
 import com.destroystokyo.paper.util.maplist.EntityList;
 import com.mojang.logging.LogUtils;
 import io.papermc.paper.util.CoordinateUtils;
@@ -55,8 +56,6 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
     public final ServerLevel world;
 
     private final StampedLock entityByLock = new StampedLock();
-    private final Lock regionLoadLock = new ReentrantLock(true);
-
     protected final Long2ObjectMap<ChunkSlicesRegion> regions = Long2ObjectMaps.synchronize(new Long2ObjectArrayMap<>());
 
     private final int minSection; // inclusive
@@ -376,12 +375,10 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         if (!entity.isRemoved()) {
             throw new IllegalStateException("Only call Entity#setRemoved to remove an entity");
         }
-        ChunkEntitySlices slices;
-        this.regionLoadLock.lock();
-        try {
-            slices = this.getChunk(sectionX, sectionZ);
-        }finally {
-            this.regionLoadLock.unlock();
+        ChunkEntitySlices slices = this.getChunk(sectionX, sectionZ);
+
+        if (slices == null){
+            throw new TargetEntitySlicesNotFoundException();
         }
 
         // all entities should be in a chunk
@@ -426,13 +423,10 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         // ensure the old section is owned by this tick thread
         TickThread.ensureTickThread(this.world, entity.sectionX, entity.sectionZ, "Cannot move entity off-main");
 
-        ChunkEntitySlices old;
+        ChunkEntitySlices old = this.getChunk(entity.sectionX, entity.sectionZ);
 
-        this.regionLoadLock.lock();
-        try {
-            old = this.getChunk(entity.sectionX, entity.sectionZ);
-        }finally {
-            this.regionLoadLock.unlock();
+        if (old == null){
+            throw new TargetEntitySlicesNotFoundException();
         }
 
         final ChunkEntitySlices slices = this.getOrCreateChunk(newSectionX, newSectionZ);
@@ -653,17 +647,12 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Cannot load in entity section off-main");
         synchronized (this) {
             final ChunkEntitySlices curr = this.getChunk(chunkX, chunkZ);
-            this.regionLoadLock.lock();
-            try {
-                if (curr != null) {
-                    this.removeChunk(chunkX, chunkZ);
-                    curr.mergeInto(slices);
-                    this.addChunk(chunkX, chunkZ, slices);
-                } else {
-                    this.addChunk(chunkX, chunkZ, slices);
-                }
-            } finally {
-                this.regionLoadLock.unlock();
+            if (curr != null) {
+                this.removeChunk(chunkX, chunkZ);
+                curr.mergeInto(slices);
+                this.addChunk(chunkX, chunkZ, slices);
+            } else {
+                this.addChunk(chunkX, chunkZ, slices);
             }
         }
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 4225863058114c527a3a420bb03e3f0de23254f5..1c0627e61efaa192bb4cdf3bd0cb2792b04806f7 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -995,9 +995,11 @@ public class ServerChunkCache extends ChunkSource {
         @Override
         // CraftBukkit start - process pending Chunk loadCallback() and unloadCallback() after each run task
         public boolean pollTask() {
-            ServerChunkCache.this.chunkMap.playerChunkManager.tickMidTick();
-            if (ServerChunkCache.this.runDistanceManagerUpdates()) {
-                return true;
+            synchronized (this){
+                ServerChunkCache.this.chunkMap.playerChunkManager.tickMidTick();
+                if (ServerChunkCache.this.runDistanceManagerUpdates()) {
+                    return true;
+                }
             }
             return super.pollTask() | ServerChunkCache.this.level.chunkTaskScheduler.executeMainThreadTask(); // Paper - rewrite chunk system
         }
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java b/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
index ece82743df21f0b776382821ad75dee96d0a0748..bf199786da6b790c57646b975cc47a941018d888 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.entity.monster.warden;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.collect.Lists;
 import com.google.common.collect.Streams;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Codec;
@@ -14,6 +15,8 @@ import java.util.Comparator;
 import java.util.List;
 import java.util.Optional;
 import java.util.UUID;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
@@ -45,6 +48,7 @@ public class AngerManagement {
     protected final Object2IntMap<Entity> angerBySuspect;
     @VisibleForTesting
     protected final Object2IntMap<UUID> angerByUuid;
+    private final Lock accessLock = new ReentrantLock();
 
     public static Codec<AngerManagement> codec(Predicate<Entity> suspectPredicate) {
         return RecordCodecBuilder.create((instance) -> {
@@ -66,56 +70,59 @@ public class AngerManagement {
     }
 
     private List<Pair<UUID, Integer>> createUuidAngerPairs() {
-        return Streams.<Pair<UUID, Integer>>concat(this.suspects.stream().map((suspect) -> {
-            return Pair.of(suspect.getUUID(), this.angerBySuspect.getInt(suspect));
-        }), this.angerByUuid.object2IntEntrySet().stream().map((suspect) -> {
+        return Streams.<Pair<UUID, Integer>>concat(this.suspects.stream().map((suspect) -> Pair.of(suspect.getUUID(), this.angerBySuspect.getInt(suspect))), this.angerByUuid.object2IntEntrySet().stream().map((suspect) -> {
             return Pair.of(suspect.getKey(), suspect.getIntValue());
         })).collect(Collectors.toList());
     }
 
     public void tick(ServerLevel world, Predicate<Entity> suspectPredicate) {
-        --this.conversionDelay;
-        if (this.conversionDelay <= 0) {
-            this.convertFromUuids(world);
-            this.conversionDelay = 2;
+        if (!this.accessLock.tryLock()){
+            return;
         }
+        try {
+            --this.conversionDelay;
+            if (this.conversionDelay <= 0) {
+                this.convertFromUuids(world);
+                this.conversionDelay = 2;
+            }
 
-        ObjectIterator<Object2IntMap.Entry<UUID>> objectIterator = this.angerByUuid.object2IntEntrySet().iterator();
+            ObjectIterator<Object2IntMap.Entry<UUID>> objectIterator = this.angerByUuid.object2IntEntrySet().iterator();
 
-        while(objectIterator.hasNext()) {
-            Object2IntMap.Entry<UUID> entry = objectIterator.next();
-            int i = entry.getIntValue();
-            if (i <= 1) {
-                objectIterator.remove();
-            } else {
-                entry.setValue(i - 1);
+            while(objectIterator.hasNext()) {
+                Object2IntMap.Entry<UUID> entry = objectIterator.next();
+                int i = entry.getIntValue();
+                if (i <= 1) {
+                    objectIterator.remove();
+                } else {
+                    entry.setValue(i - 1);
+                }
             }
-        }
 
-        ObjectIterator<Object2IntMap.Entry<Entity>> objectIterator2 = this.angerBySuspect.object2IntEntrySet().iterator();
+            ObjectIterator<Object2IntMap.Entry<Entity>> objectIterator2 = this.angerBySuspect.object2IntEntrySet().iterator();
 
-        while(objectIterator2.hasNext()) {
-            Object2IntMap.Entry<Entity> entry2 = objectIterator2.next();
-            int j = entry2.getIntValue();
-            Entity entity = entry2.getKey();
-            Entity.RemovalReason removalReason = entity.getRemovalReason();
-            if (j > 1 && suspectPredicate.test(entity) && removalReason == null) {
-                entry2.setValue(j - 1);
-            } else {
-                this.suspects.remove(entity);
-                objectIterator2.remove();
-                if (j > 1 && removalReason != null) {
-                    switch (removalReason) {
-                        case CHANGED_DIMENSION:
-                        case UNLOADED_TO_CHUNK:
-                        case UNLOADED_WITH_PLAYER:
-                            this.angerByUuid.put(entity.getUUID(), j - 1);
+            while(objectIterator2.hasNext()) {
+                Object2IntMap.Entry<Entity> entry2 = objectIterator2.next();
+                int j = entry2.getIntValue();
+                Entity entity = entry2.getKey();
+                Entity.RemovalReason removalReason = entity.getRemovalReason();
+                if (j > 1 && suspectPredicate.test(entity) && removalReason == null) {
+                    entry2.setValue(j - 1);
+                } else {
+                    this.suspects.remove(entity);
+                    objectIterator2.remove();
+                    if (j > 1 && removalReason != null) {
+                        switch (removalReason) {
+                            case CHANGED_DIMENSION, UNLOADED_TO_CHUNK, UNLOADED_WITH_PLAYER ->
+                                    this.angerByUuid.put(entity.getUUID(), j - 1);
+                        }
                     }
                 }
             }
-        }
 
-        this.sortAndUpdateHighestAnger();
+            this.sortAndUpdateHighestAnger();
+        }finally {
+            this.accessLock.unlock();
+        }
     }
 
     private void sortAndUpdateHighestAnger() {
@@ -124,7 +131,6 @@ public class AngerManagement {
         if (this.suspects.size() == 1) {
             this.highestAnger = this.angerBySuspect.getInt(this.suspects.get(0));
         }
-
     }
 
     private void convertFromUuids(ServerLevel world) {
@@ -144,46 +150,64 @@ public class AngerManagement {
     }
 
     public int increaseAnger(Entity entity, int amount) {
-        boolean bl = !this.angerBySuspect.containsKey(entity);
-        int i = this.angerBySuspect.computeInt(entity, (suspect, anger) -> {
-            return Math.min(150, (anger == null ? 0 : anger) + amount); // Paper - diff on change
-        });
-        if (bl) {
-            int j = this.angerByUuid.removeInt(entity.getUUID());
-            i += j;
-            this.angerBySuspect.put(entity, i);
-            this.suspects.add(entity);
-        }
+        this.accessLock.lock();
+        try {
+            boolean bl = !this.angerBySuspect.containsKey(entity);
+            int i = this.angerBySuspect.computeInt(entity, (suspect, anger) -> {
+                return Math.min(150, (anger == null ? 0 : anger) + amount); // Paper - diff on change
+            });
+            if (bl) {
+                int j = this.angerByUuid.removeInt(entity.getUUID());
+                i += j;
+                this.angerBySuspect.put(entity, i);
+                this.suspects.add(entity);
+            }
 
-        this.sortAndUpdateHighestAnger();
-        return i;
+            this.sortAndUpdateHighestAnger();
+            return i;
+        }finally {
+            this.accessLock.unlock();
+        }
     }
 
     public void clearAnger(Entity entity) {
-        this.angerBySuspect.removeInt(entity);
-        this.suspects.remove(entity);
-        this.sortAndUpdateHighestAnger();
+        this.accessLock.lock();
+        try {
+            this.angerBySuspect.removeInt(entity);
+            this.suspects.remove(entity);
+            this.sortAndUpdateHighestAnger();
+        }finally {
+            this.accessLock.unlock();
+        }
     }
 
     @Nullable
     private Entity getTopSuspect() {
-        return this.suspects.stream().filter(this.filter).findFirst().orElse((Entity)null);
+        List<Entity> cop;
+        this.accessLock.lock();
+        try {
+            cop = Lists.newArrayList(this.suspects);
+        }finally {
+            this.accessLock.unlock();
+        }
+        return cop.stream().filter(this.filter).findFirst().orElse((Entity)null);
     }
 
     public int getActiveAnger(@Nullable Entity entity) {
-        return entity == null ? this.highestAnger : this.angerBySuspect.getInt(entity);
+        this.accessLock.lock();
+        try {
+            return entity == null ? this.highestAnger : this.angerBySuspect.getInt(entity);
+        }finally {
+            this.accessLock.unlock();
+        }
     }
 
     public Optional<LivingEntity> getActiveEntity() {
-        return Optional.ofNullable(this.getTopSuspect()).filter((suspect) -> {
-            return suspect instanceof LivingEntity;
-        }).map((suspect) -> {
-            return (LivingEntity)suspect;
-        });
+        return Optional.ofNullable(this.getTopSuspect()).filter((suspect) -> suspect instanceof LivingEntity).map((suspect) -> (LivingEntity)suspect);
     }
 
     @VisibleForTesting
-    protected static record Sorter(AngerManagement angerManagement) implements Comparator<Entity> {
+    protected record Sorter(AngerManagement angerManagement) implements Comparator<Entity> {
         @Override
         public int compare(Entity entity, Entity entity2) {
             if (entity.equals(entity2)) {
