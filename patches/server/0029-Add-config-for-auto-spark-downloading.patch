From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: BuildTools <unconfigured@null.spigotmc.org>
Date: Sat, 21 Jan 2023 17:33:10 +0800
Subject: [PATCH] Add config for auto spark downloading


diff --git a/src/main/java/cc/keyimc/keyi/config/KGlobalConfig.java b/src/main/java/cc/keyimc/keyi/config/KGlobalConfig.java
index 57dea90862268145967f11c9eda5e1b5fab31bcb..18f075e14c9fe597eb57dc1ab5137b11c8f430e0 100644
--- a/src/main/java/cc/keyimc/keyi/config/KGlobalConfig.java
+++ b/src/main/java/cc/keyimc/keyi/config/KGlobalConfig.java
@@ -80,7 +80,10 @@ public class KGlobalConfig {
     public boolean multiThreadTracker = true;
     public int multiThreadTrackerThreadCount = Math.max(Runtime.getRuntime().availableProcessors()/2,2);
     public int parallelEntityThreadCount = Runtime.getRuntime().availableProcessors();
+    //Debug
     public boolean awaitParallelEntity = true;
+    //Misc
+    public boolean autoDownloadSpark = true;
 
     private void initValues() {
         verbose = get("verbose", verbose);
@@ -110,8 +113,12 @@ public class KGlobalConfig {
         multiThreadTrackerThreadCount = get("optimizations.multithread-tracker-thread-count",multiThreadTrackerThreadCount);
         parallelEntityThreadCount = get("optimizations.parallel-entity-thread-count",parallelEntityThreadCount);
 
+        //Debug
         awaitParallelEntity = get("debug.await-parallel-entity-tasks",awaitParallelEntity);
 
+        //Misc
+        autoDownloadSpark = get("misc.auto-download=spark",autoDownloadSpark);
+
         initComments();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 4af2cc1f0df04cb4e1b44ac5a9f6391da0641d07..1b3a1626b9f239283b8917fb6be21354e24ea39b 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit;
 
+import cc.keyimc.keyi.config.KGlobalConfig;
 import com.google.common.base.Charsets;
 import com.google.common.base.Function;
 import com.google.common.base.Preconditions;
@@ -451,31 +452,33 @@ public final class CraftServer implements Server {
             // Purpur start
             List<File> extraJars = this.extraPluginJars();
             if (!Boolean.getBoolean("Purpur.IReallyDontWantSpark")) {
-                try {
-                    File file = new File("cache", "spark.jar");
-                    file.getParentFile().mkdirs();
-
-                    boolean shouldDownload = true;
-                    if (file.exists()) {
-                        String fileSha1 = String.format("%040x", new java.math.BigInteger(1, java.security.MessageDigest.getInstance("SHA-1").digest(java.nio.file.Files.readAllBytes(file.toPath()))));
-                        String sparkSha1;
-                        try (java.io.BufferedReader reader = new java.io.BufferedReader(new InputStreamReader(new java.net.URL("https://sparkapi.lucko.me/download/bukkit/sha1").openStream()))) {
-                            sparkSha1 = reader.lines().collect(Collectors.joining(""));
+                if (KGlobalConfig.getInstance().autoDownloadSpark){ //KeYi-MT
+                    try {
+                        File file = new File("cache", "spark.jar");
+                        file.getParentFile().mkdirs();
+
+                        boolean shouldDownload = true;
+                        if (file.exists()) {
+                            String fileSha1 = String.format("%040x", new java.math.BigInteger(1, java.security.MessageDigest.getInstance("SHA-1").digest(java.nio.file.Files.readAllBytes(file.toPath()))));
+                            String sparkSha1;
+                            try (java.io.BufferedReader reader = new java.io.BufferedReader(new InputStreamReader(new java.net.URL("https://sparkapi.lucko.me/download/bukkit/sha1").openStream()))) {
+                                sparkSha1 = reader.lines().collect(Collectors.joining(""));
+                            }
+
+                            if (fileSha1.equals(sparkSha1)) {
+                                shouldDownload = false;
+                            }
                         }
 
-                        if (fileSha1.equals(sparkSha1)) {
-                            shouldDownload = false;
+                        if (shouldDownload) {
+                            java.nio.file.Files.copy(new java.net.URL("https://sparkapi.lucko.me/download/bukkit").openStream(), file.toPath(), java.nio.file.StandardCopyOption.REPLACE_EXISTING);
                         }
-                    }
 
-                    if (shouldDownload) {
-                        java.nio.file.Files.copy(new java.net.URL("https://sparkapi.lucko.me/download/bukkit").openStream(), file.toPath(), java.nio.file.StandardCopyOption.REPLACE_EXISTING);
+                        extraJars.add(file);
+                    } catch (Exception e) {
+                        getLogger().severe("Purpur: Failed to download and install spark plugin");
+                        e.printStackTrace();
                     }
-
-                    extraJars.add(file);
-                } catch (Exception e) {
-                    getLogger().severe("Purpur: Failed to download and install spark plugin");
-                    e.printStackTrace();
                 }
             }
             Plugin[] plugins = this.pluginManager.loadPlugins(pluginFolder, extraJars);
